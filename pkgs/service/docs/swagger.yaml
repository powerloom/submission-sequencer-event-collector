basePath: /
definitions:
  service.BatchCount:
    properties:
      totalBatches:
        type: integer
    type: object
  service.DailySubmissions:
    properties:
      day:
        type: integer
      eligibleSubmissions:
        type: integer
      totalSubmissions:
        type: integer
    type: object
  service.DiscardedSubmissionByDayResponse:
    properties:
      details:
        $ref: '#/definitions/service.DiscardedSubmissionByProjectDetails'
      projectID:
        type: string
    type: object
  service.DiscardedSubmissionByProjectDetails:
    properties:
      discardedSubmissionCount:
        type: integer
      discardedSubmissions:
        items:
          type: string
        type: array
      finalizedCID:
        type: string
    type: object
  service.DiscardedSubmissionDetails:
    properties:
      discardedSubmissionCount:
        type: integer
      discardedSubmissions:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      mostFrequentSnapshotCID:
        type: string
    type: object
  service.DiscardedSubmissionDetailsByDayAPIResponse:
    properties:
      currentPage:
        type: integer
      discardedSubmissions:
        items:
          $ref: '#/definitions/service.DiscardedSubmissionByDayResponse'
        type: array
      slotID:
        type: integer
      totalPages:
        type: integer
    type: object
  service.DiscardedSubmissionDetailsResponse:
    properties:
      details:
        $ref: '#/definitions/service.DiscardedSubmissionDetails'
      projectID:
        type: string
    type: object
  service.DiscardedSubmissionsAPIResponse:
    properties:
      projects:
        items:
          $ref: '#/definitions/service.DiscardedSubmissionDetailsResponse'
        type: array
    type: object
  service.DiscardedSubmissionsByDayRequest:
    properties:
      dataMarketAddress:
        type: string
      day:
        type: integer
      page:
        type: integer
      slotID:
        type: integer
      token:
        type: string
    type: object
  service.EligibleNodes:
    properties:
      day:
        type: integer
      eligibleNodesCount:
        type: integer
      slotIDs:
        items:
          type: string
        type: array
    type: object
  service.EligibleNodesCountRequest:
    properties:
      dataMarketAddress:
        type: string
      day:
        type: integer
      token:
        type: string
    type: object
  service.EligibleNodesPastDaysRequest:
    properties:
      dataMarketAddress:
        type: string
      pastDays:
        type: integer
      token:
        type: string
    type: object
  service.EligibleSubmissionCounts:
    properties:
      count:
        type: integer
      slotID:
        type: integer
    type: object
  service.EligibleSubmissionCountsResponse:
    properties:
      eligibleSubmissionCounts:
        items:
          $ref: '#/definitions/service.EligibleSubmissionCounts'
        type: array
    type: object
  service.EpochDataMarketDayRequest:
    properties:
      dataMarketAddress:
        type: string
      day:
        type: integer
      epochID:
        type: integer
      token:
        type: string
    type: object
  service.EpochDataMarketRequest:
    properties:
      dataMarketAddress:
        type: string
      epochID:
        type: integer
      token:
        type: string
    type: object
  service.EpochSubmissionSummary:
    properties:
      submissions:
        items:
          $ref: '#/definitions/service.SubmissionDetails'
        type: array
    type: object
  service.InfoType-int64:
    properties:
      response:
        type: integer
      success:
        type: boolean
    type: object
  service.InfoType-service_BatchCount:
    properties:
      response:
        $ref: '#/definitions/service.BatchCount'
      success:
        type: boolean
    type: object
  service.InfoType-service_DiscardedSubmissionDetailsByDayAPIResponse:
    properties:
      response:
        $ref: '#/definitions/service.DiscardedSubmissionDetailsByDayAPIResponse'
      success:
        type: boolean
    type: object
  service.InfoType-service_DiscardedSubmissionsAPIResponse:
    properties:
      response:
        $ref: '#/definitions/service.DiscardedSubmissionsAPIResponse'
      success:
        type: boolean
    type: object
  service.InfoType-service_EligibleNodes:
    properties:
      response:
        $ref: '#/definitions/service.EligibleNodes'
      success:
        type: boolean
    type: object
  service.InfoType-service_EligibleSubmissionCountsResponse:
    properties:
      response:
        $ref: '#/definitions/service.EligibleSubmissionCountsResponse'
      success:
        type: boolean
    type: object
  service.InfoType-service_EpochSubmissionSummary:
    properties:
      response:
        $ref: '#/definitions/service.EpochSubmissionSummary'
      success:
        type: boolean
    type: object
  service.InfoType-service_ResponseArray-service_DailySubmissions:
    properties:
      response:
        items:
          $ref: '#/definitions/service.DailySubmissions'
        type: array
      success:
        type: boolean
    type: object
  service.InfoType-service_ResponseArray-service_EligibleNodes:
    properties:
      response:
        items:
          $ref: '#/definitions/service.EligibleNodes'
        type: array
      success:
        type: boolean
    type: object
  service.InfoType-service_SubmissionInfo:
    properties:
      response:
        $ref: '#/definitions/service.SubmissionInfo'
      success:
        type: boolean
    type: object
  service.InfoType-string:
    properties:
      response:
        type: string
      success:
        type: boolean
    type: object
  service.RequestSwagger:
    properties:
      deadline:
        type: integer
      epochID:
        type: integer
      projectID:
        type: string
      slotID:
        type: integer
      snapshotCID:
        type: string
    type: object
  service.Response-int64:
    properties:
      info:
        $ref: '#/definitions/service.InfoType-int64'
      requestID:
        type: string
    type: object
  service.Response-service_BatchCount:
    properties:
      info:
        $ref: '#/definitions/service.InfoType-service_BatchCount'
      requestID:
        type: string
    type: object
  service.Response-service_DiscardedSubmissionDetailsByDayAPIResponse:
    properties:
      info:
        $ref: '#/definitions/service.InfoType-service_DiscardedSubmissionDetailsByDayAPIResponse'
      requestID:
        type: string
    type: object
  service.Response-service_DiscardedSubmissionsAPIResponse:
    properties:
      info:
        $ref: '#/definitions/service.InfoType-service_DiscardedSubmissionsAPIResponse'
      requestID:
        type: string
    type: object
  service.Response-service_EligibleNodes:
    properties:
      info:
        $ref: '#/definitions/service.InfoType-service_EligibleNodes'
      requestID:
        type: string
    type: object
  service.Response-service_EligibleSubmissionCountsResponse:
    properties:
      info:
        $ref: '#/definitions/service.InfoType-service_EligibleSubmissionCountsResponse'
      requestID:
        type: string
    type: object
  service.Response-service_EpochSubmissionSummary:
    properties:
      info:
        $ref: '#/definitions/service.InfoType-service_EpochSubmissionSummary'
      requestID:
        type: string
    type: object
  service.Response-service_ResponseArray-service_DailySubmissions:
    properties:
      info:
        $ref: '#/definitions/service.InfoType-service_ResponseArray-service_DailySubmissions'
      requestID:
        type: string
    type: object
  service.Response-service_ResponseArray-service_EligibleNodes:
    properties:
      info:
        $ref: '#/definitions/service.InfoType-service_ResponseArray-service_EligibleNodes'
      requestID:
        type: string
    type: object
  service.Response-service_SubmissionInfo:
    properties:
      info:
        $ref: '#/definitions/service.InfoType-service_SubmissionInfo'
      requestID:
        type: string
    type: object
  service.Response-string:
    properties:
      info:
        $ref: '#/definitions/service.InfoType-string'
      requestID:
        type: string
    type: object
  service.SlotIDInDataMarketRequest:
    properties:
      dataMarketAddress:
        type: string
      slotID:
        type: integer
      snapshotterAddress:
        type: string
      token:
        type: string
    type: object
  service.SnapshotSubmissionSwagger:
    properties:
      header:
        type: string
      request:
        $ref: '#/definitions/service.RequestSwagger'
      signature:
        type: string
    type: object
  service.SnapshotterNodeVersionRequest:
    properties:
      dataMarketAddress:
        type: string
      slotID:
        type: integer
      token:
        type: string
    type: object
  service.SubmissionDetails:
    properties:
      submissionData:
        $ref: '#/definitions/service.SnapshotSubmissionSwagger'
      submissionID:
        type: string
    type: object
  service.SubmissionInfo:
    properties:
      nodeVersion:
        type: string
      timestamp:
        type: string
    type: object
  service.SubmissionsRequest:
    properties:
      dataMarketAddress:
        type: string
      pastDays:
        type: integer
      slotID:
        type: integer
      token:
        type: string
    type: object
host: '{{API_Host}}'
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.yoursupport.com
  description: Offers comprehensive documentation of endpoints for seamless interaction
    with the sequencer, enabling efficient data retrieval.
  termsOfService: http://yourterms.com
  title: Sequencer API Documentation
  version: "1.0"
paths:
  /activeNodesCountByEpoch:
    post:
      consumes:
      - application/json
      description: Retrieves the count of active nodes that submitted snapshots for
        a specific epoch in a given data market
      parameters:
      - description: Epoch data market request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.EpochDataMarketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Response-int64'
        "400":
          description: 'Bad Request: Invalid input parameters (e.g., missing or invalid
            epochID, or invalid data market address)'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Incorrect token'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Failed to fetch epoch active nodes
            count'
          schema:
            type: string
      summary: Get active nodes count for an epoch
      tags:
      - Active Nodes
  /batchCount:
    post:
      consumes:
      - application/json
      description: Retrieves the total number of batches created within a specific
        epoch for a given data market address
      parameters:
      - description: Epoch data market request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.EpochDataMarketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Response-service_BatchCount'
        "400":
          description: 'Bad Request: Invalid input parameters (e.g., missing or invalid
            epochID, or invalid data market address)'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Incorrect token'
          schema:
            type: string
      summary: Get total batch count
      tags:
      - Batch Count
  /discardedSubmissionsByDay:
    post:
      consumes:
      - application/json
      description: Retrieves the details of discarded submissions for a specified
        day and slotID associated with a given data market address
      parameters:
      - description: Data market slotID day request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.DiscardedSubmissionsByDayRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Response-service_DiscardedSubmissionDetailsByDayAPIResponse'
        "400":
          description: 'Bad Request: Invalid input parameters (e.g., invalid slotID,
            invalid day or invalid data market address)'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Incorrect token'
          schema:
            type: string
      summary: Get discarded submission details by day
      tags:
      - Discarded Submissions
  /discardedSubmissionsByEpoch:
    post:
      consumes:
      - application/json
      description: Retrieves the discarded submissions details within a specific epoch
        for a given data market address
      parameters:
      - description: Epoch data market day request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.EpochDataMarketDayRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Response-service_DiscardedSubmissionsAPIResponse'
        "400":
          description: 'Bad Request: Invalid input parameters (e.g., missing or invalid
            epochID, invalid day or invalid data market address)'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Incorrect token'
          schema:
            type: string
      summary: Get discarded submission details by epoch
      tags:
      - Discarded Submissions
  /eligibleNodesCount:
    post:
      consumes:
      - application/json
      description: Retrieves the total count of eligible nodes and optionally their
        corresponding slotIDs (controlled by the includeSlotDetails query param) for
        a specified data market address and day
      parameters:
      - description: Set to true to include slotIDs in the response
        in: query
        name: includeSlotDetails
        type: boolean
      - description: Eligible nodes count payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.EligibleNodesCountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Response-service_EligibleNodes'
        "400":
          description: 'Bad Request: Invalid input parameters (e.g., day < 1 or day
            > current day, invalid data market address)'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Incorrect token'
          schema:
            type: string
      summary: Get eligible nodes count for a specific day
      tags:
      - Eligible Nodes
  /eligibleNodesCountPastDays:
    post:
      consumes:
      - application/json
      description: Retrieves the total count of eligible nodes along with their corresponding
        slotIDs for a specified data market address across a specified number of past
        days
      parameters:
      - description: Set to true to include slotIDs in the response
        in: query
        name: includeSlotDetails
        type: boolean
      - description: Eligible nodes count past days payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.EligibleNodesPastDaysRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Response-service_ResponseArray-service_EligibleNodes'
        "400":
          description: 'Bad Request: Invalid input parameters (e.g., past days < 1
            or past days > current day, invalid data market address)'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Incorrect token'
          schema:
            type: string
      summary: Get eligible nodes count for past days
      tags:
      - Eligible Nodes
  /eligibleSlotSubmissionCount:
    post:
      consumes:
      - application/json
      description: Retrieves the submission counts of all eligible slotIDs within
        a specific epoch for a given data market address
      parameters:
      - description: Epoch data market day request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.EpochDataMarketDayRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Response-service_EligibleSubmissionCountsResponse'
        "400":
          description: 'Bad Request: Invalid input parameters (e.g., missing or invalid
            epochID, invalid day or invalid data market address)'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Incorrect token'
          schema:
            type: string
      summary: Get the submission counts of all eligible slotIDs
      tags:
      - Eligible Submission Count
  /epochSubmissionDetails:
    post:
      consumes:
      - application/json
      description: Retrieves the submission count and details of all submissions for
        a specific epoch and data market address
      parameters:
      - description: Epoch data market request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.EpochDataMarketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Response-service_EpochSubmissionSummary'
        "400":
          description: 'Bad Request: Invalid input parameters (e.g., missing or invalid
            epochID, or invalid data market address)'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Incorrect token'
          schema:
            type: string
      summary: Get epoch submission details
      tags:
      - Submissions
  /lastSimulatedSubmission:
    post:
      consumes:
      - application/json
      description: Retrieves the last time a simulation submission was received for
        a given data market address and slotID
      parameters:
      - description: Data market address and slotID request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.SlotIDInDataMarketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Response-service_SubmissionInfo'
        "400":
          description: 'Bad Request: Invalid input parameters (e.g., invalid slotID
            or invalid data market address)'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Incorrect token'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Failed to fetch last simulated submission'
          schema:
            type: string
      summary: Get the last time a simulation submission was received
      tags:
      - Submissions
  /lastSnapshotSubmission:
    post:
      consumes:
      - application/json
      description: Retrieves the last time a snapshot submission against a released
        epoch was received for a given data market address and slotID
      parameters:
      - description: Data market address and slotID request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.SlotIDInDataMarketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Response-service_SubmissionInfo'
        "400":
          description: 'Bad Request: Invalid input parameters (e.g., invalid slotID
            or invalid data market address)'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Incorrect token'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Failed to fetch last snapshot submission'
          schema:
            type: string
      summary: Get the last time a snapshot submission against a released epoch was
        received
      tags:
      - Submissions
  /snapshotterNodeVersion:
    post:
      consumes:
      - application/json
      description: Retrieves the version of a snapshotter node for a given data market
        address and slotID
      parameters:
      - description: Snapshotter node version request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.SnapshotterNodeVersionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Response-string'
        "400":
          description: 'Bad Request: Invalid input parameters (e.g., invalid slotID
            or invalid data market address)'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Incorrect token'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Failed to fetch snapshotter node version'
          schema:
            type: string
      summary: Get snapshotter node version
      tags:
      - Submissions
  /totalSubmissions:
    post:
      consumes:
      - application/json
      description: Retrieves eligible and total submission counts for a specific data
        market address across a specified number of past days
      parameters:
      - description: Submissions request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.SubmissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Response-service_ResponseArray-service_DailySubmissions'
        "400":
          description: 'Bad Request: Invalid input parameters (e.g., past days < 1
            or past days > current day, invalid slotID or invalid data market address)'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Incorrect token'
          schema:
            type: string
      summary: Get eligible and total submissions count
      tags:
      - Submissions
schemes:
- https
swagger: "2.0"
